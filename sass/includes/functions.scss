@import "vars";

@mixin text-proportion($size) {
	font-size:1em*$text_proportion*(6-$size)+1em;
}

@mixin column-calc($number) {
  width: ($column-width * $number) + ($column_gutter * ($number - 1));
}

@mixin offset-calc($number) {
  margin-left: ($column-width * $number) + ($column_gutter * $number) ;
}

@mixin clearfix {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}

@mixin background-gradient($start,$finish){
  background: $start;
  background: -moz-linear-gradient(top,  $start 0%, $finish 100%);
  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start), color-stop(100%,$finish));
  background: -webkit-linear-gradient(top,  $start 0%,$finish 100%);
  background: -o-linear-gradient(top,  $start 0%,$finish 100%);
  background: -ms-linear-gradient(top,  $start 0%,$finish 100%);
  background: linear-gradient(to bottom,  $start 0%,$finish 100%);
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start', endColorstr='$finish',GradientType=0 );
}
/* 
  $x        Posicion en X
  $y        Posicion en X
  $blur     Distancia de difuminacion
  $spread   Sobre borde
  $color    Color en Hexa
  $alpha:1  Alfa del 0-1
*/
@mixin box-shadow($x, $y, $blur, $spread, $color, $alpha:1, $inset:"") {
  -moz-box-shadow:      $x $y $blur $spread rgba($color, $alpha) $inset;
  -webkit-box-shadow:   $x $y $blur $spread rgba($color, $alpha) $inset;
  box-shadow:           $x $y $blur $spread rgba($color, $alpha) $inset;
}
@mixin text-shadow($x, $y, $blur, $color) {
  text-shadow: $x $y $blur $color;
  filter: dropshadow(color=$color, offx=$x, offy=$y);
}

@mixin transition($property, $duration, $function){
  -webkit-transition: $property $duration $function;
  -moz-transition:    $property $duration $function;
  -ms-transition:     $property $duration $function;
  -o-transition:      $property $duration $function;
  transition:         $property $duration $function;
}
/* Recibe numero del 0 - 1 */
@mixin opacity($value) {
  filter:  alpha(opacity=$value*100);
  opacity: $value;
}

@mixin border-radius ($topL , $topR:"false" , $bottomR:"false" , $bottomL:"false") {
  @if $topR == "false" and $bottomR == "false" and $bottomL =="false" {
    -webkit-border-radius: $topL;
    -moz-border-radius: $topL;
    -ms-border-radius: $topL;
    -o-border-radius: $topL;
    border-radius: $topL;
  } 
  @else if $topL != "false" and $bottomR == "false" and $bottomL =="false" {
    -webkit-border-radius: $topL $topL $topR $topR;
    -moz-border-radius: $topL $topL $topR $topR;
    -ms-border-radius: $topL $topL $topR $topR;
     border-radius: $topL $topL $topR $topR;  
  } 
  @else if $topL != "false" and $bottomR != "false" and $bottomL =="false" {
    -webkit-border-radius: $topL  $topR  $bottomR $topR;
    -moz-border-radius: $topL $topR $bottomR $topR;
    -ms-border-radius: $topL $topR $bottomR $topR;
    -o-border-radius: $topL $topR $bottomR $topR;
    border-radius: $topL $topR $bottomR $topR;  
  } 
  @else {
    -webkit-border-radius: $topL  $topR  $bottomR $bottomL;
    -moz-border-radius: $topL $topR $bottomR $bottomL;
    -ms-border-radius: $topL $topR $bottomR $bottomL;
    -o-border-radius: $topL $topR $bottomR $bottomL;
    border-radius: $topL $topR $bottomR $bottomL; 
 }
}